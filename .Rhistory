# Insertion, Merge, and Quick Sort
df <- data.frame("n_values" = c(10000, 20000, 40000, 80000, 160000))
df$mergeTimes = c(6, 6, 14, 28, 61)
df$insertionTimes = c(80, 314, 1273, 5523, 23236)
df$quickTimes = c(2, 2, 4, 11, 24)
ggplot(data = df, aes(x = n_values)) +
geom_line(aes(y = mergeTimes, color = "merge sort")) +
geom_line(aes(y = insertionTimes, color = "insertion sort")) +
geom_line(aes(y = quickTimes, color = "quick sort")) +
ylab("Runtime (milliseconds)") + xlab("Input Size") +
ggtitle("Comparing Runtimes Across Different Sorting Methods")
library(ggplot2)
# Insertion, Merge, and Quick Sort
df <- data.frame("n_values" = c(10000, 20000, 40000, 80000, 160000))
df$mergeTimes = c(6, 6, 14, 28, 61)
df$insertionTimes = c(80, 314, 1273, 5523, 23236)
df$quickTimes = c(2, 2, 4, 11, 24)
ggplot(data = df, aes(x = n_values)) +
geom_line(aes(y = mergeTimes, color = "merge sort")) +
geom_line(aes(y = insertionTimes, color = "insertion sort")) +
geom_line(aes(y = quickTimes, color = "quick sort")) +
ylab("Runtime (milliseconds)") + xlab("Input Size") +
ggtitle("Comparing Runtimes Across Different Sorting Methods")
# Modified Quick Sort
df2 <- data.frame("cutoff" = c(2,4,8,16,32,64,128))
df2$runtime <- c(201, 176, 172, 174, 175, 182, 210)
ggplot(data = df2, aes(x = cutoff, y = runtime)) + geom_line()
ggplot(data = df2, aes(x = cutoff, y = runtime)) + geom_line() + ggtitle("Modified Quick Sort: Cutoff vs Runtime")
# Modified Quick Sort vs Traditional Quick Sort
df3 <- data.frame("n_values" = c(100000, 200000, 300000, 400000, 500000, 600000))
df3$quickSort = c(18, 30, 52, 67, 90, 109)
df3$modQuickSort = c(17, 29, 48, 63, 90, 108)
ggplot(data = df3, aes(x = n_values)) +
geom_line(aes(y = quickSort, color = "quick sort")) +
geom_line(aes(y = modQuickSort, color =  "modified quick sort")) +
ylab("Runtime (milliseconds)") + xlab("Size of input") +
ggtitle("Comparing Runtimes of QuickSort and ModifiedQuickSort")
ggplot(data = df2, aes(x = cutoff, y = runtime)) + geom_line() + ggtitle("Modified Quick Sort: Cutoff vs Runtime")
ggplot(data = df3, aes(x = n_values)) +
geom_line(aes(y = quickSort, color = "quick sort")) +
geom_line(aes(y = modQuickSort, color =  "modified quick sort")) +
ylab("Runtime (milliseconds)") + xlab("Size of input") +
ggtitle("Comparing Runtimes of QuickSort and ModifiedQuickSort")
ggplot(data = df2, aes(x = cutoff, y = runtime)) + geom_line() + ggtitle("Modified Quick Sort: Cutoff vs Runtime")
log(10, 2)
log(20, 2)
20*log(20, 2)
10 * log(10, 2)
5 * log(5, 2)
5 * log(5)
10 * log(10)
20 * log(20)
log(10, 5)
log(10, 5) * 5
log(10, 5) * 10
log(20, 5) * 20
log(5, 3) * 5
log(10, 3) * 10
log(20, 3) * 20
log(20, 2) * 20
log(10, 2) * 10
log(10, 2.5) * 10
log(10, 2.75) * 10
log(20, 2.75) * 20
log(20, 4) * 20
log(20, 5) * 20
log(20, 3.5) * 20
log(10, 3.5) * 10
log(5, 3.5) * 5
(10)(8)
228/20
5 * (0.6 * 5)
18/5
3.6/5
5 * (0.72 * 5)
10 * (0.72 * 10)
20 * (0.72 * 20)
10 * (0.65 * 10)
20 * (0.66 * 20)
5 * (0.66 * 5)
setwd("~/Documents/POLI 175")
setwd("~/Documents/POLI 175/recidivism_prediction")
load("opt_lasso_model.Rdata")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
View(df)
View(df)
View(df2)
load("opt_lasso_model.Rdata")
View(opt.model.lasso)
rm(list = ls())
library(ggplot)
library(Matrix)
load("opt_lasso_model.Rdata")
rm(list = ls())
library(ggplot2)
library(ggplot2)
load("opt_lasso_model.Rdata")
library("ggplot2")
library(dplyr)
library(ggplot2)
rm(list = ls())
library(ggplot2)
load("opt_lasso_model.Rdata")
dat <- read.csv("recidivism_data_sample.csv")
#convert to factors
dat$race <- as.factor(dat$race)
dat$recidivate <- as.factor(dat$recidivate)
dat$sex <- as.factor(dat$sex)
View(opt.model.lasso)
View(dat)
load("opt_rr_model.Rdata")
lasso.yhat <- predict(opt.model.lasso, newx = x.test, type = "response")
#convert categorical variables to factors
dat$race <- as.factor(dat$race)
dat$recidivate <- as.factor(dat$recidivate)
dat$sex <- as.factor(dat$sex)
# set y
y <- dat$recidivate
# create the X matrix
x <- subset(dat, select = -c(recidivate))
x <- model.matrix(~.-1, x[,]) # Convert all categorical variable to dummies.
# Determine number of in training and test set. Split accordingly.
n.total <- length(y)
prop.train <- 0.67
set.seed(123)
r <- sample(1:n.total, round(prop.train*n.total), replace = FALSE)
x.train <- x[r,]
x.test <- x[-r,]
y.train <- y[r]
y.test <- y[-r]
lasso.yhat <- predict(opt.model.lasso, newx = x.test, type = "response")
library(glmnet)
library(Matrix)
library(glmnet)
library(glmnet)
rm(list = ls())
library(ggplot2)
library(glmnet)
