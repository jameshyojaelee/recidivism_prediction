ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_gray() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
mse_log <- calc_mse(dat$recidivate,CV.dat$yhat)
mse_lasso <- calc_mse(y.test,test.predprob)
mse_ridge <- calc_mse(y.test,test.predprob.rr)
mse_bt <- calc_mse(dat$recidivate,test.dat.preds)
mse_rf <- calc_mse(test.dat$recidivate,predprob)
# yhat is the vector of predicted probabilities
calc_acc <- function(y, yhat){
yhat.class <- yhat > 0.5
return(mean(y == yhat.class))
}
calc_prec <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(y[yhat.class == 1] == 1))
}
calc_recall <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(yhat.class[y == 1] == 1))
}
calc_mse <- function(y, yhat) {
return(mean((yhat - y)^2))
}
calib_plot <- function(y, yhat, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# plot calibration
df <- data.frame(y = y, yhat = yhat, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat))) %>%
gather(key = "key", value = "probability", -decile_bins)
# plot
ggplot(df, aes(x = decile_bins, y = probability, color = key)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_gray() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Predicted Probability Decile Bin") + ylab("Probability")
}
calib_plot_race <- function(y, yhat, race, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# create df
df <- data.frame(y = y, yhat = yhat, race = race, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(race, decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat)))
# plot
ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_gray() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
mse_log <- calc_mse(dat$recidivate,CV.dat$yhat)
mse_lasso <- calc_mse(y.test,test.predprob)
mse_ridge <- calc_mse(y.test,test.predprob.rr)
mse_bt <- calc_mse(dat$recidivate,test.dat.preds)
mse_rf <- calc_mse(test.dat$recidivate,predprob)
acc_log <- calc_acc(dat$recidivate,CV.dat$yhat)
acc_lasso <- calc_acc(y.test,test.predprob)
acc_ridge <- calc_acc(y.test,test.predprob.rr)
acc_bt <- calc_acc(dat$recidivate,test.dat.preds)
acc_rf <- calc_acc(test.dat$recidivate,predprob)
prec_log <- calc_prec(dat$recidivate,CV.dat$yhat)
prec_lasso <- calc_prec(y.test,test.predprob)
prec_ridge <- calc_prec(y.test,test.predprob.rr)
prec_bt <- calc_prec(dat$recidivate,test.dat.preds)
prec_rf <- calc_prec(test.dat$recidivate,predprob)
recall_log <- calc_recall(dat$recidivate,CV.dat$yhat)
recall_lasso <- calc_recall(y.test,test.predprob)
recall_ridge <- calc_recall(y.test,test.predprob.rr)
recall_bt <- calc_recall(test.dat$recidivate,test.dat.preds)
recall_rf <- calc_recall(test.dat$recidivate,predprob)
labcol <- c("MSE","Accuracy","Precision","Recall")
labrow <- c("Log Reg","Lasso","Ridge","Boosted Trees","Random Forest")
log_val <- c(mse_log,acc_log,prec_log,recall_log)
lasso_val <- c(mse_lasso,acc_lasso,prec_lasso,recall_lasso)
ridge_val <- c(mse_ridge,acc_ridge,prec_ridge,recall_ridge)
bt_val <- c(mse_bt,acc_bt,prec_bt,recall_bt)
rf_val <- c(mse_rf,acc_rf,prec_rf,recall_rf)
table <- matrix(c(log_val,lasso_val,ridge_val,bt_val,rf_val),nrow=5, byrow = TRUE, dimnames = list(labrow,labcol))
table
calib_plot(dat$recidivate,CV.dat$yhat,"Logistic Regression Calibration Plot")
calib_plot_race(dat$recidivate,CV.dat$yhat,as.factor(c(1:6)),"Logistic Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob,"Lasso Regression Calibration Plot")
calib_plot_race(y.test,test.predprob,as.factor(c(1:6)),"Lasso Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob.rr,"Ridge Regression Calibration Plot")
calib_plot_race(y.test,test.predprob.rr,as.factor(c(1:6)),"Ridge Regression Calibration Plot by Race")
calib_plot(dat$recidivate,test.dat.preds,"Boosted Trees Calibration Plot")
calib_plot_race(dat$recidivate,test.dat.preds,as.factor(c(1:6)),"Boosted Trees Calibration Plot by Race")
calib_plot(test.dat$recidivate,predprob,"Random Forest Calibration Plot")
calib_plot_race(test.dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
# yhat is the vector of predicted probabilities
calc_acc <- function(y, yhat){
yhat.class <- yhat > 0.5
return(mean(y == yhat.class))
}
calc_prec <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(y[yhat.class == 1] == 1))
}
calc_recall <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(yhat.class[y == 1] == 1))
}
calc_mse <- function(y, yhat) {
return(mean((yhat - y)^2))
}
calib_plot <- function(y, yhat, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# plot calibration
df <- data.frame(y = y, yhat = yhat, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat))) %>%
gather(key = "key", value = "probability", -decile_bins)
# plot
ggplot(df, aes(x = decile_bins, y = probability, color = key)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Predicted Probability Decile Bin") + ylab("Probability")
}
calib_plot_race <- function(y, yhat, race, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# create df
df <- data.frame(y = y, yhat = yhat, race = race, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(race, decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat)))
# plot
ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
# yhat is the vector of predicted probabilities
calc_acc <- function(y, yhat){
yhat.class <- yhat > 0.5
return(mean(y == yhat.class))
}
calc_prec <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(y[yhat.class == 1] == 1))
}
calc_recall <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(yhat.class[y == 1] == 1))
}
calc_mse <- function(y, yhat) {
return(mean((yhat - y)^2))
}
calib_plot <- function(y, yhat, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# plot calibration
df <- data.frame(y = y, yhat = yhat, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat))) %>%
gather(key = "key", value = "probability", -decile_bins)
# plot
ggplot(df, aes(x = decile_bins, y = probability, color = key)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Predicted Probability Decile Bin") + ylab("Probability")
}
calib_plot_race <- function(y, yhat, race, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# create df
df <- data.frame(y = y, yhat = yhat, race = race, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(race, decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat)))
# plot
ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.5, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
mse_log <- calc_mse(dat$recidivate,CV.dat$yhat)
mse_lasso <- calc_mse(y.test,test.predprob)
mse_ridge <- calc_mse(y.test,test.predprob.rr)
mse_bt <- calc_mse(dat$recidivate,test.dat.preds)
mse_rf <- calc_mse(test.dat$recidivate,predprob)
acc_log <- calc_acc(dat$recidivate,CV.dat$yhat)
acc_lasso <- calc_acc(y.test,test.predprob)
acc_ridge <- calc_acc(y.test,test.predprob.rr)
acc_bt <- calc_acc(dat$recidivate,test.dat.preds)
acc_rf <- calc_acc(test.dat$recidivate,predprob)
prec_log <- calc_prec(dat$recidivate,CV.dat$yhat)
prec_lasso <- calc_prec(y.test,test.predprob)
prec_ridge <- calc_prec(y.test,test.predprob.rr)
prec_bt <- calc_prec(dat$recidivate,test.dat.preds)
prec_rf <- calc_prec(test.dat$recidivate,predprob)
recall_log <- calc_recall(dat$recidivate,CV.dat$yhat)
recall_lasso <- calc_recall(y.test,test.predprob)
recall_ridge <- calc_recall(y.test,test.predprob.rr)
recall_bt <- calc_recall(test.dat$recidivate,test.dat.preds)
recall_rf <- calc_recall(test.dat$recidivate,predprob)
labcol <- c("MSE","Accuracy","Precision","Recall")
labrow <- c("Log Reg","Lasso","Ridge","Boosted Trees","Random Forest")
log_val <- c(mse_log,acc_log,prec_log,recall_log)
lasso_val <- c(mse_lasso,acc_lasso,prec_lasso,recall_lasso)
ridge_val <- c(mse_ridge,acc_ridge,prec_ridge,recall_ridge)
bt_val <- c(mse_bt,acc_bt,prec_bt,recall_bt)
rf_val <- c(mse_rf,acc_rf,prec_rf,recall_rf)
table <- matrix(c(log_val,lasso_val,ridge_val,bt_val,rf_val),nrow=5, byrow = TRUE, dimnames = list(labrow,labcol))
table
calib_plot(dat$recidivate,CV.dat$yhat,"Logistic Regression Calibration Plot")
calib_plot_race(dat$recidivate,CV.dat$yhat,as.factor(c(1:6)),"Logistic Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob,"Lasso Regression Calibration Plot")
calib_plot_race(y.test,test.predprob,as.factor(c(1:6)),"Lasso Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob.rr,"Ridge Regression Calibration Plot")
calib_plot_race(y.test,test.predprob.rr,as.factor(c(1:6)),"Ridge Regression Calibration Plot by Race")
calib_plot(dat$recidivate,test.dat.preds,"Boosted Trees Calibration Plot")
calib_plot_race(dat$recidivate,test.dat.preds,as.factor(c(1:6)),"Boosted Trees Calibration Plot by Race")
calib_plot(test.dat$recidivate,predprob,"Random Forest Calibration Plot")
calib_plot_race(test.dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
length(predprob)
length(test.dat$recidivate)
dat$recidivate
test.dat.preds
calib_plot(test.dat$recidivate,predprob,"Random Forest Calibration Plot")
calib_plot_race(test.dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
# yhat is the vector of predicted probabilities
calc_acc <- function(y, yhat){
yhat.class <- yhat > 0.5
return(mean(y == yhat.class))
}
calc_prec <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(y[yhat.class == 1] == 1))
}
calc_recall <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(yhat.class[y == 1] == 1))
}
calc_mse <- function(y, yhat) {
return(mean((yhat - y)^2))
}
calib_plot <- function(y, yhat, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# plot calibration
df <- data.frame(y = y, yhat = yhat, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat))) %>%
gather(key = "key", value = "probability", -decile_bins)
# plot
ggplot(df, aes(x = decile_bins, y = probability, color = key)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.4, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Predicted Probability Decile Bin") + ylab("Probability")
}
calib_plot_race <- function(y, yhat, race, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# create df
df <- data.frame(y = y, yhat = yhat, race = race, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(race, decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat)))
# plot
ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.4, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
# yhat is the vector of predicted probabilities
calc_acc <- function(y, yhat){
yhat.class <- yhat > 0.5
return(mean(y == yhat.class))
}
calc_prec <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(y[yhat.class == 1] == 1))
}
calc_recall <- function(y, yhat) {
yhat.class <- yhat > 0.5
return(mean(yhat.class[y == 1] == 1))
}
calc_mse <- function(y, yhat) {
return(mean((yhat - y)^2))
}
calib_plot <- function(y, yhat, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# plot calibration
df <- data.frame(y = y, yhat = yhat, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat))) %>%
gather(key = "key", value = "probability", -decile_bins)
# plot
ggplot(df, aes(x = decile_bins, y = probability, color = key)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.4, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Predicted Probability Decile Bin") + ylab("Probability")
}
calib_plot_race <- function(y, yhat, race, title) {
# split into deciles
prob_deciles <- seq(from = 0, to = 1, by = 0.1)
# summary stats
prob_decile_bins <- as.numeric(
cut(yhat, breaks = prob_deciles, include.lowest = TRUE))
prob_decile_bins <- prob_decile_bins/10
# create df
df <- data.frame(y = y, yhat = yhat, race = race, decile_bins = prob_decile_bins)
df <- as.data.frame(df %>%
group_by(race, decile_bins) %>%
summarise(actual_recidivism = mean(y),
pred_prob = mean(yhat)))
# plot
ggplot(df, aes(x = decile_bins, y = actual_recidivism, color = race)) +
geom_line() +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
theme_bw() + theme(plot.margin = margin(1.5,0,1.5,0, "cm")) +
theme(legend.background = element_rect(fill="lightblue",
size=0.4, linetype="solid",
colour ="darkblue")) +
ggtitle(title) +
xlab("Pred Probability Decile Bin") + ylab("Average Recidivism Rate")
}
mse_log <- calc_mse(dat$recidivate,CV.dat$yhat)
mse_lasso <- calc_mse(y.test,test.predprob)
mse_ridge <- calc_mse(y.test,test.predprob.rr)
mse_bt <- calc_mse(dat$recidivate,test.dat.preds)
mse_rf <- calc_mse(test.dat$recidivate,predprob)
acc_log <- calc_acc(dat$recidivate,CV.dat$yhat)
acc_lasso <- calc_acc(y.test,test.predprob)
acc_ridge <- calc_acc(y.test,test.predprob.rr)
acc_bt <- calc_acc(dat$recidivate,test.dat.preds)
acc_rf <- calc_acc(test.dat$recidivate,predprob)
prec_log <- calc_prec(dat$recidivate,CV.dat$yhat)
prec_lasso <- calc_prec(y.test,test.predprob)
prec_ridge <- calc_prec(y.test,test.predprob.rr)
prec_bt <- calc_prec(dat$recidivate,test.dat.preds)
prec_rf <- calc_prec(test.dat$recidivate,predprob)
recall_log <- calc_recall(dat$recidivate,CV.dat$yhat)
recall_lasso <- calc_recall(y.test,test.predprob)
recall_ridge <- calc_recall(y.test,test.predprob.rr)
recall_bt <- calc_recall(test.dat$recidivate,test.dat.preds)
recall_rf <- calc_recall(test.dat$recidivate,predprob)
labcol <- c("MSE","Accuracy","Precision","Recall")
labrow <- c("Log Reg","Lasso","Ridge","Boosted Trees","Random Forest")
log_val <- c(mse_log,acc_log,prec_log,recall_log)
lasso_val <- c(mse_lasso,acc_lasso,prec_lasso,recall_lasso)
ridge_val <- c(mse_ridge,acc_ridge,prec_ridge,recall_ridge)
bt_val <- c(mse_bt,acc_bt,prec_bt,recall_bt)
rf_val <- c(mse_rf,acc_rf,prec_rf,recall_rf)
table <- matrix(c(log_val,lasso_val,ridge_val,bt_val,rf_val),nrow=5, byrow = TRUE, dimnames = list(labrow,labcol))
table
calib_plot(dat$recidivate,CV.dat$yhat,"Logistic Regression Calibration Plot")
calib_plot_race(dat$recidivate,CV.dat$yhat,as.factor(c(1:6)),"Logistic Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob,"Lasso Regression Calibration Plot")
calib_plot_race(y.test,test.predprob,as.factor(c(1:6)),"Lasso Regression Calibration Plot by Race")
calib_plot(y.test,test.predprob.rr,"Ridge Regression Calibration Plot")
calib_plot_race(y.test,test.predprob.rr,as.factor(c(1:6)),"Ridge Regression Calibration Plot by Race")
calib_plot(dat$recidivate,test.dat.preds,"Boosted Trees Calibration Plot")
calib_plot_race(dat$recidivate,test.dat.preds,as.factor(c(1:6)),"Boosted Trees Calibration Plot by Race")
calib_plot(test.dat$recidivate,predprob,"Random Forest Calibration Plot")
calib_plot_race(test.dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
length(dat$recidivate)
length(test.dat.preds)
ppp <- calib_plot_race(y.test,test.predprob,as.factor(c(1:6)),"Lasso Regression Calibration Plot by Race")
ppp
ppp$data
View(ppp)
calib_plot_race(dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
calib_plot_race(dat$recidivate,predprob,as.factor(c(1:6)),"Random Forest Calibration Plot by Race")
y.test
length(y.test)
length(test.predprob)
length(CV.dat$yhat)
calib_plot(dat$recidivate,CV.dat$yhat,"Logistic Regression Calibration Plot")
calib_plot_race(y.test,CV.dat$yhat,dat$race,"Logistic Regression Calibration Plot by Race")
length(dat$race)
length(CV.dat$yhat)
length(y.test)
calib_plot_race(dat,CV.dat$yhat,dat$race,"Logistic Regression Calibration Plot by Race")
calib_plot_race(y,CV.dat$yhat,dat$race,"Logistic Regression Calibration Plot by Race")
calib_plot_race(y.test,test.predprob,dat$race[-r],"Lasso Regression Calibration Plot by Race")
calib_plot_race(y.test,test.predprob,y.test$race,"Lasso Regression Calibration Plot by Race")
calib_plot_race(y.test,test.predprob,dat$race,"Lasso Regression Calibration Plot by Race")
calib_plot_race(y.test,test.predprob,dat$race[-r],"Lasso Regression Calibration Plot by Race")
calib_plot_race(y.test,test.predprob.rr,dat$race[-r],"Ridge Regression Calibration Plot by Race")
dat$race[-r]
length(dat$race[-r])
length(y.test)
length(test.predprob.rr)
length(*test.predprob)
length(test.predprob)
length(y.test)
length(test.predprob)
test.predprob
test.predprob.rr
length(dat$recidivate)
calib_plot(y,CV.dat$yhat,"Logistic Regression Calibration Plot")
train.dat
calib_plot_race(dat$recidivate,predprob,test.dat$race,"Random Forest Calibration Plot by Race")
calib_plot_race(dat$recidivate,test.dat.preds,test.dat$race,"Boosted Trees Calibration Plot by Race")
calib_plot_race(dat$recidivate,predprob,test.dat$race,"Random Forest Calibration Plot by Race")
length(predprob)
calib_plot_race(test.dat$recidivate,predprob,test.dat$race,"Random Forest Calibration Plot by Race")
calib_plot_race(test.dat$recidivate,predprob,test.dat$race,"Random Forest Calibration Plot by Race")
test.dat
calib_plot_race(test.dat$recidivate,test.dat.preds,test.dat$race,"Boosted Trees Calibration Plot by Race")
calib_plot(test.dat$recidivate,test.dat.preds,"Boosted Trees Calibration Plot")
length(test.predprob.rr)
length(y.test)
calib_plot_race(y.test,test.predprob.rr,dat$race[-r],"Ridge Regression Calibration Plot by Race")
